#定义nginx 运行的用户和用户组
#user  nobody;
#user  www-data;
#指定pid存放文件
#pid        logs/nginx.pid;
# user 和 id 默认设置  更改与否没有不同

#工作的子进程数量（通常等于CPU数量或者2倍于CPU） auto 自动检测
worker_processes  auto;

#更改worker进程的最大打开文件数限制 
#如果没设置的话 这个值为操作系统的限制 
#设置后你的操作系统和Nginx可以处理比“ulimit -a”更多的文件 所以把这个值设高
#这样nginx就不会有“too many open files”问题了
#一个nginx进程打开的最多文件描述符数目，
#理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，
#但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。
worker_rlimit_nofile 65535;


#log存放路径
#全局错误日志定义类型,[debug | info | notice | warn | warn | error | crit ]
error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#error_log  logs/error.log  crit;



events {
	#使用网络IO模型linux 2.6+ 建议epoll FreeBSD建议采用kqueue window下不指定
	#参考事件模型， use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]	
    #use epoll;

	#一个worker 进程同时打开的最大连接数 同时也由系统的可用socket 连接数限制
	#最大连接数 = 连接数 * 进程数
    worker_connections  1024;
	
	#告诉nginx 收到一个新连接通知后接受尽可能多的连接
	#multi_accept on;
	
}


http {
	#关闭错误页面的nginx 版本
	server_tokens off;
	#在磁盘和TCP socket 之间相互copy数据 比read() 和 write() 更有效
	#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，
	#对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，
	#可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
	sendfile on;
	#开启目录列表访问，合适下载服务器，默认关闭。
	autoindex on;
	
	#定义日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
	
	
	#是否存储访问日志 关闭可以磁盘IO 操作更快
    #access_log  logs/access.log  main;

    # 在一个数据包里发送所有的头文件  而不是一个接一个的发送
	#防止网络阻塞
    tcp_nopush     on;
	#不缓存数据
	tcp_nodelay    on;
	

	#给客户端分配keep-alive 连接超时时间 设置低使ngnix 持续工作时间更长
    #keepalive_timeout  0;
    keepalive_timeout  10;
	client_header_timeout 10;
	#设定请求缓存
	#client_header_buffer_size 32k;#上传文件大小设置
	#client_body_buffer_size 8m;
	#client_max_body_size 32m;
	#large_client_header_buffers 4 64k;
	client_body_timeout 10;
	#ignore_invalid_headers on;
	#指定启用除第一条error_page指令以外其他的error_page
	#recursive_error_pages on;
	
	
	#FastCGI相关参数为了改善网站性能：减少资源占用，提高访问速度
	fastcgi_connect_timeout 300;
	fastcgi_send_timeout 300;
	fastcgi_read_timeout 300;
	fastcgi_buffer_size 64k;
	fastcgi_buffers 4 64k;
	fastcgi_busy_buffers_size 128k;
	fastcgi_temp_file_write_size 128k;
	
	#让 nginx 在处理自己内部重定向时不默认使用  server_name 设置中的第一个域名
    #server_name_in_redirect off;
	#服务器名字的hash表大小
	#server_names_hash_bucket_size
	
	#关闭不响应的客户端连接 释放 客户端占用的内存空间
	#reset_timeout_connection on;
	#指定客户端的响应时间 在两次客户端读取操作之间 客户端没有读取数据  Nginx 会关闭连接
	send_timeout 10;
	
	#设置用于保存key(比如当前连接数) 的共享内存参数  5m = 5MB应设置足够大
	limit_conn_zone $binary_remote_addr zone=addr:5m;
	#允许 一个IP 最多同时打开100个连接
	limit_conn addr 100;
	
	#proxy_set_header Host $host;
	#proxy_set_header X-Real-IP $remote_addr;
	#后端的web服务器可以通过X-Forwarded-For获取用户真实IP
	#proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	#proxy_redirect off;
	#
	#proxy_connect_timeout 5; #nginx 和后端服务器链接超时时间 (代理连接超时)
	#proxy_read_timeout 60; #后端服务器数据传回时间
	#proxy_send_timeout 5;  #连接成功后, 后端服务器响应时间(代理接收超时)
	#proxy_buffer_size 16k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
	#proxy_buffers 64k;    ##proxy_buffers缓冲区，网页平均在32k以下的设置
	#proxy_busy_buffers_size 128k;  #高负荷下缓冲大小（proxy_buffers*2）
	#proxy_temp_file_write_size 128k; ##设定缓存文件夹大小，大于这个值，将从upstream服务器传
	
	
	
	#包含另一个文件内容的指令
	#文件扩展名与文件类型映射表
	include mime.types;
	#include gzip.conf;
	
	#default_type text/html application/octet-stream;
	charset UTF-8;
	
	#负载均衡
	upstream tomcat{
		#根据ip计算将请求分配各个后端tomcat 这里不能解决session问题
		#同一机器在多网络情况下 路由切换  ip 可能不同 最大请求失败次数3 默认1
		#ip_hash;
		#server localhost:18081 max_fails=3 weight=1 fail_timeout=30s;
		#server localhost:8080 max_fails=3 weight=1 fail_timeout=30s;
		server localhost:8080;
	}
	
	#zip模块设置 使用 gzip 压缩可以降低网站带宽消耗 同时提升访问速度
    gzip  on;
	#IE6 兼容
	gzip_disable "msie6";
	#压缩之前查找是否有预处理过的资源  不用再次压缩
	gzip_static on;
	#压缩所有
	gzip_proxied any;
	#需要压缩的最少字节数 小于1000 不压缩  压缩比发送费时间
	gzip_min_length 1000;
	#压缩等级 1-9  9压缩最慢 压缩比最大
	gzip_comp_level 5;
	#压缩格式 默认text/html
	#gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml text/javascript;
	#最小压缩文件大小
	#gzip_min_length 1k;
	#gzip_buffers 16k;#压缩缓冲区
	gzip_http_version 1.1;#压缩版本 默认1.1, 前端如果是squid2.5 使用1.0
	#limit_zone crawler $binary_remote_addr 10m; #开启限制ip 连接数的时候需要使用
	
	
	
	#缓存数目100000 缓存时间20s
	open_file_cache max=100000 inactive=20s;
	#检测正确信息的间隔时间
	open_file_cache_valid 30s;
	#不活动时间期间里最小的文件数
	open_file_cache_min_uses 2;
	#
	#open_file_cache_error on;
	
	
	
    server {
        listen       80;
        server_name  localhost;
		root html;
        charset utf-8;

        #access_log  logs/host.access.log  main;
		
		index index.html;
		
		
		#location ~* .(gif|jpg|jpeg|png|bmp|swf|tar.gz)${
		#	expires 30d;
		#}
		
		#location ~* \.(js|css|html)?/${
		#	expires 12h;
		#}
		
		#location ~* ^/(images|fonts|js|css|)(\w|/){
		#	expires 3d;
		#}
		
		location = / {
			index index.html;
		}
		
		#~  为区分大小写匹配
		#~* 为不区分大小写匹配
		#!~和!~*分别为区分大小写不匹配及不区分大小写不匹配
		location ~* \.(html|ico|gif|jpg|jpeg|png|bmp|swf|css|js|woff|otf|ttf)$ {
			index index.html;
			expires 1m;
		}
		
		#反向代理
        location / {
			#proxy_connect_timeout 3;
			#proxy_send_timeout 30;
			#proxy_read_timeout 30;
			#此处域名必须与 upstream 一致
			proxy_pass http://tomcat;
            #定义服务器默认网站根目录位置
			proxy_set_header  Host $host;  
            proxy_set_header  X-Real-IP  $remote_addr; 
			root   html;
			index  index.html index.htm; #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。
        }
		
		#监控 http://serverip/status
		location /status{
			stub_status on;
			access_log off;
			auth_basic "nginxStatus";
			auth_basic_user_file conf/htpasswd;
			
		}
		
		
        #error_page  404  /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files  if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


}

# another virtual host using mix of IP-  name-  and port-based configuration
#
#server {
#    listen       8000;
#    listen       somename:8080;
#    server_name  somename  alias  another.alias;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}


# HTTPS server
#
#server {
#    listen       443 ssl;
#    server_name  localhost;

#    ssl_certificate      cert.pem;
#    ssl_certificate_key  cert.key;

#    ssl_session_cache    shared:SSL:1m;
#    ssl_session_timeout  5m;

#    ssl_ciphers  HIGH:!aNULL:!MD5;
#    ssl_prefer_server_ciphers  on;

#    location / {
#        root   html;
#        index  index.html index.htm;
#    }
#}
